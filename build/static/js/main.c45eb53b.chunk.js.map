{"version":3,"sources":["Counters.js","HookedTodo.js","ContainerTodo.js","App.js","serviceWorker.js","index.js"],"names":["store","createStore","state","action","type","console","log","Counter","useStore","dispatch","useDispatch","count","getState","onClick","i","WithSelector","offset","hidden","value","useSelector","HiddenCounter","useState","setValue","ConnectedCounter","connect","ConnectedCounterWithMapState","todoStore","data","id","TodoEntry","entry","message","onChange","e","Todo","todos","Object","entries","sort","a","b","created","map","x","key","Date","now","uuid","HookedTodo","getDispatch","ContainerTodo","App","Counters","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.c45eb53b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { createStore } from 'redux';\nimport { useStore, useDispatch, Provider, connect, useSelector } from 'react-redux';\n\nfunction count(state = 0, action=0) {\n    switch (action.type) {\n      case 'ADD':\n        console.log('updating store');\n        return state+=1;\n      default:\n        return state;\n    }\n  }\n  \n  const store = createStore(count, 42);\n  \n  function mapStateToProps(state) {\n    return {count:state};\n  }\n  \n  const Counter = () => {\n    const store = useStore();\n    const dispatch = useDispatch();\n    const count = store.getState();\n    return (\n      <span>\n        counter: \n        <button onClick={() => dispatch({type:'ADD'})}>\n          {count}\n        </button>\n      </span>\n    );\n  };\n  \n  let i = 0;\n  const WithSelector = ({offset}) => {\n    console.log('rendering WithSelector', {hidden:i, offset});\n    \n    const value = useSelector(() => {\n      console.log('invoking selector in HiddenCounter', ++i); \n      return 0;\n    });\n  \n    return (\n      <div>\n         current count: {i} <br/>\n         control value: {value}\n      </div>\n    );\n  };\n  \n  const HiddenCounter = () => {\n    const [offset, setValue] = useState(0);\n    return (\n      <div>\n        <button onClick={() => setValue(!offset)} >setState</button>\n        {offset? <WithSelector offset={offset} /> : null}\n      </div>\n    );\n  }\n  \n  const ConnectedCounter = connect()(Counter);\n  const ConnectedCounterWithMapState = connect(mapStateToProps)(Counter);\n\n\nexport default () => (\n    <>\n      <h2>Counters</h2>\n      <Provider store={store}>\n        <div> simple: <Counter /> </div>\n        <div> connected: <ConnectedCounter /> </div>\n        <div> connectedWithMapStateToProps: <ConnectedCounterWithMapState/> </div> \n        <br />\n        <div> <HiddenCounter/> </div>\n      </Provider>\n    </>\n)","import React from 'react';\nimport { createStore } from 'redux';\nimport { useDispatch, Provider, useSelector } from 'react-redux';\nimport { v4 as uuid } from 'uuid';\n\n\nfunction todo(state = {}, action = {}) {\n  console.log(state, action);\n  const {type, ...data} = action;\n  switch (type) {\n    case 'DELETE':\n      delete state[data.id];\n      return {...state}; \n    case 'UPDATE':\n    return {\n        ...state,\n        [data.id]: data\n    }\n    default:\n      return state;\n  }\n}\n\nconst todoStore = createStore(todo)\n\nconst TodoEntry = ({id}) => {\n\n  const entry = useSelector(store => {\n    if (!store[id]) {\n      console.log(`tried to select ${id} to render but cound find in store`);\n    }\n\n    return store[id];\n  });\n\n  console.log(`${id} rendered`);\n\n  const dispatch = useDispatch();\n  const {message} = entry;\n\n  return (\n    <div>\n      <input value={message} onChange={(e)=>dispatch({type:\"UPDATE\", id, message: e.value})} />\n      <button onClick={()=>dispatch({type: \"DELETE\", id})}>Remove {id}</button>\n    </div>\n  );\n};\n\nconst Todo = () => {\n  const todos = useSelector(store => Object\n    .entries( store )\n    .sort( (a, b) => a[1].created - b[1].created )\n    .map( x=>x[0]) );\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      { todos.map( id => <TodoEntry id={id} key={id} />) }\n      <button onClick={() => dispatch({'type':'UPDATE', created: Date.now(), id: uuid()})}> Add Entry </button>\n    </div>\n  ); \n}\n\nconst HookedTodo = () => (\n  <>\n    <h2>Todo</h2>\n    <Provider store={todoStore}>\n      <Todo />\n    </Provider>\n  </>\n);\n\nexport default HookedTodo;","import React from 'react';\nimport { createStore } from 'redux';\nimport { Provider, connect } from 'react-redux';\nimport { v4 as uuid } from 'uuid';\n\n\nfunction todo(state = {}, action = {}) {\n  console.log(state, action);\n  const {type, ...data} = action;\n  switch (type) {\n    case 'DELETE':\n      delete state[data.id];\n      return {...state}; \n    case 'UPDATE':\n    return {\n        ...state,\n        [data.id]: data\n    }\n    default:\n      return state;\n  }\n}\n\nconst todoStore = createStore(todo)\n\nconst getDispatch = dispatch=>({dispatch});\n\nconst stateToEntry = (state, {id}) => {\n  if (!state[id]) {\n    console.log(`tried to select ${id} to render but cound find in store`);\n  }\n  \n  return state[id];\n}\n\nconst TodoEntry = connect(\n  stateToEntry, \n  getDispatch\n)( ({id, message, dispatch}) => {\n  console.log(`${id} rendered`);\n\n  return (\n    <div>\n      <input value={message} onChange={(e)=>dispatch({type:\"UPDATE\", id, message: e.value})} />\n      <button onClick={()=>dispatch({type: \"DELETE\", id})}> Remove {id} </button>\n    </div>\n  );\n});\n\nconst stateToTodoList = (state) => {\n  return {\n    todos: Object\n      .entries( state )\n      .sort( (a, b) => a[1].created - b[1].created )\n     .map( x=>x[0]) \n  };\n}\n\nconst Todo = connect(\n  stateToTodoList, \n  getDispatch\n)( ({todos, dispatch}) => {\n  return (\n    <div>\n      { todos.map( id => <TodoEntry id={id} key={id} />) }\n      <button onClick={() => dispatch({'type':'UPDATE', created: Date.now(), id: uuid()})}> Add Entry </button>\n    </div>\n  ); \n});\n\nconst ContainerTodo = () => (\n  <>\n    <h2>Connected Todo</h2>\n    <Provider store={todoStore}>\n      <Todo />\n    </Provider>\n  </>\n);\n\nexport default ContainerTodo;","import React, { useState } from 'react';\nimport Counters from './Counters';\nimport HookedTodo from './HookedTodo';\nimport ContainerTodo from './ContainerTodo';\n\n\nfunction App() {\n  return (\n    <div>\n      <Counters/>\n      <HookedTodo />\n      <ContainerTodo />\n    </div>\n  );\n}\n\nexport default App;\n\n\n// useReducer race-condition\n// https://codesandbox.io/s/usereducer-bug-jnjql","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}